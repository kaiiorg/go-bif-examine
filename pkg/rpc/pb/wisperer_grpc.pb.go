// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/rpc/pb/wisperer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Whisperer_GetJob_FullMethodName     = "/pb.Whisperer/GetJob"
	Whisperer_JobResults_FullMethodName = "/pb.Whisperer/JobResults"
)

// WhispererClient is the client API for Whisperer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhispererClient interface {
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	JobResults(ctx context.Context, in *JobResultsRequest, opts ...grpc.CallOption) (*JobResultsResponse, error)
}

type whispererClient struct {
	cc grpc.ClientConnInterface
}

func NewWhispererClient(cc grpc.ClientConnInterface) WhispererClient {
	return &whispererClient{cc}
}

func (c *whispererClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, Whisperer_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whispererClient) JobResults(ctx context.Context, in *JobResultsRequest, opts ...grpc.CallOption) (*JobResultsResponse, error) {
	out := new(JobResultsResponse)
	err := c.cc.Invoke(ctx, Whisperer_JobResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhispererServer is the server API for Whisperer service.
// All implementations must embed UnimplementedWhispererServer
// for forward compatibility
type WhispererServer interface {
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	JobResults(context.Context, *JobResultsRequest) (*JobResultsResponse, error)
	mustEmbedUnimplementedWhispererServer()
}

// UnimplementedWhispererServer must be embedded to have forward compatible implementations.
type UnimplementedWhispererServer struct {
}

func (UnimplementedWhispererServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedWhispererServer) JobResults(context.Context, *JobResultsRequest) (*JobResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobResults not implemented")
}
func (UnimplementedWhispererServer) mustEmbedUnimplementedWhispererServer() {}

// UnsafeWhispererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhispererServer will
// result in compilation errors.
type UnsafeWhispererServer interface {
	mustEmbedUnimplementedWhispererServer()
}

func RegisterWhispererServer(s grpc.ServiceRegistrar, srv WhispererServer) {
	s.RegisterService(&Whisperer_ServiceDesc, srv)
}

func _Whisperer_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispererServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whisperer_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispererServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whisperer_JobResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispererServer).JobResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whisperer_JobResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispererServer).JobResults(ctx, req.(*JobResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Whisperer_ServiceDesc is the grpc.ServiceDesc for Whisperer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whisperer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Whisperer",
	HandlerType: (*WhispererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Whisperer_GetJob_Handler,
		},
		{
			MethodName: "JobResults",
			Handler:    _Whisperer_JobResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/pb/wisperer.proto",
}
