// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/rpc.go/pb/bif_examine.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BifExamine_GetAllProjects_FullMethodName   = "/pb.BifExamine/GetAllProjects"
	BifExamine_DeleteProject_FullMethodName    = "/pb.BifExamine/DeleteProject"
	BifExamine_UploadKey_FullMethodName        = "/pb.BifExamine/UploadKey"
	BifExamine_UploadBif_FullMethodName        = "/pb.BifExamine/UploadBif"
	BifExamine_DownloadResource_FullMethodName = "/pb.BifExamine/DownloadResource"
)

// BifExamineClient is the client API for BifExamine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BifExamineClient interface {
	GetAllProjects(ctx context.Context, in *GetAllProjectsRequest, opts ...grpc.CallOption) (*GetAllProjectsResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	UploadKey(ctx context.Context, in *UploadKeyRequest, opts ...grpc.CallOption) (*UploadKeyResponse, error)
	UploadBif(ctx context.Context, in *UploadBifRequest, opts ...grpc.CallOption) (*UploadBifResponse, error)
	DownloadResource(ctx context.Context, in *DownloadResourceRequest, opts ...grpc.CallOption) (*DownloadResourceResponse, error)
}

type bifExamineClient struct {
	cc grpc.ClientConnInterface
}

func NewBifExamineClient(cc grpc.ClientConnInterface) BifExamineClient {
	return &bifExamineClient{cc}
}

func (c *bifExamineClient) GetAllProjects(ctx context.Context, in *GetAllProjectsRequest, opts ...grpc.CallOption) (*GetAllProjectsResponse, error) {
	out := new(GetAllProjectsResponse)
	err := c.cc.Invoke(ctx, BifExamine_GetAllProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifExamineClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, BifExamine_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifExamineClient) UploadKey(ctx context.Context, in *UploadKeyRequest, opts ...grpc.CallOption) (*UploadKeyResponse, error) {
	out := new(UploadKeyResponse)
	err := c.cc.Invoke(ctx, BifExamine_UploadKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifExamineClient) UploadBif(ctx context.Context, in *UploadBifRequest, opts ...grpc.CallOption) (*UploadBifResponse, error) {
	out := new(UploadBifResponse)
	err := c.cc.Invoke(ctx, BifExamine_UploadBif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifExamineClient) DownloadResource(ctx context.Context, in *DownloadResourceRequest, opts ...grpc.CallOption) (*DownloadResourceResponse, error) {
	out := new(DownloadResourceResponse)
	err := c.cc.Invoke(ctx, BifExamine_DownloadResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BifExamineServer is the server API for BifExamine service.
// All implementations must embed UnimplementedBifExamineServer
// for forward compatibility
type BifExamineServer interface {
	GetAllProjects(context.Context, *GetAllProjectsRequest) (*GetAllProjectsResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	UploadKey(context.Context, *UploadKeyRequest) (*UploadKeyResponse, error)
	UploadBif(context.Context, *UploadBifRequest) (*UploadBifResponse, error)
	DownloadResource(context.Context, *DownloadResourceRequest) (*DownloadResourceResponse, error)
	mustEmbedUnimplementedBifExamineServer()
}

// UnimplementedBifExamineServer must be embedded to have forward compatible implementations.
type UnimplementedBifExamineServer struct {
}

func (UnimplementedBifExamineServer) GetAllProjects(context.Context, *GetAllProjectsRequest) (*GetAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProjects not implemented")
}
func (UnimplementedBifExamineServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedBifExamineServer) UploadKey(context.Context, *UploadKeyRequest) (*UploadKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKey not implemented")
}
func (UnimplementedBifExamineServer) UploadBif(context.Context, *UploadBifRequest) (*UploadBifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBif not implemented")
}
func (UnimplementedBifExamineServer) DownloadResource(context.Context, *DownloadResourceRequest) (*DownloadResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadResource not implemented")
}
func (UnimplementedBifExamineServer) mustEmbedUnimplementedBifExamineServer() {}

// UnsafeBifExamineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BifExamineServer will
// result in compilation errors.
type UnsafeBifExamineServer interface {
	mustEmbedUnimplementedBifExamineServer()
}

func RegisterBifExamineServer(s grpc.ServiceRegistrar, srv BifExamineServer) {
	s.RegisterService(&BifExamine_ServiceDesc, srv)
}

func _BifExamine_GetAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifExamineServer).GetAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifExamine_GetAllProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifExamineServer).GetAllProjects(ctx, req.(*GetAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifExamine_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifExamineServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifExamine_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifExamineServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifExamine_UploadKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifExamineServer).UploadKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifExamine_UploadKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifExamineServer).UploadKey(ctx, req.(*UploadKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifExamine_UploadBif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifExamineServer).UploadBif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifExamine_UploadBif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifExamineServer).UploadBif(ctx, req.(*UploadBifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifExamine_DownloadResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifExamineServer).DownloadResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BifExamine_DownloadResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifExamineServer).DownloadResource(ctx, req.(*DownloadResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BifExamine_ServiceDesc is the grpc.ServiceDesc for BifExamine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BifExamine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BifExamine",
	HandlerType: (*BifExamineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProjects",
			Handler:    _BifExamine_GetAllProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _BifExamine_DeleteProject_Handler,
		},
		{
			MethodName: "UploadKey",
			Handler:    _BifExamine_UploadKey_Handler,
		},
		{
			MethodName: "UploadBif",
			Handler:    _BifExamine_UploadBif_Handler,
		},
		{
			MethodName: "DownloadResource",
			Handler:    _BifExamine_DownloadResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc.go/pb/bif_examine.proto",
}
